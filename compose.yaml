# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  vote:
    build:
      context: ./Application-code/vote
    ports:
      - "8080:8080"
    environment:
      - OPTION_A=Cats
      - OPTION_B=Dogs
    depends_on:
      - redis
    volumes:
      - voteapp:/app
    networks:
      - frontend
      - backend

  redis:
    image: "redis:alpine"
    #ports:
    #  - 6379
    volumes:
      - redis_data:/data
    networks:
      - backend

  result:
    build:
      context: ./Application-code/result
    secrets:
      - db-password
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - NODE_ENV=production
    ports:
      - 4000:4000
    depends_on:
      db:
        condition: service_healthy
    networks:
      - frontend
      - backend

  worker:
    build:
      context: ./Application-code/worker
      target: final
    #ports:
    #  - 8000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - worker_data:/app
    networks:
      - backend

  db:
    image: "postgres:15-alpine"
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db_data:/var/lib/postgresql/data
      #- ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #ports:
    #  - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks:
      - backend

volumes:
  voteapp:
  redis_data:
  db_data:
  worker_data:

networks:
  frontend:
  backend:

secrets:
  db-password:
    file: ./Application-code/result/password.txt
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt
