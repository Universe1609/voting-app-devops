pipeline{
    agent any
    tools {
        jdk 'jdk'
        nodejs 'nodejs_18'
    }

    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        DOCKERFILE_NAME='vote-app'
        TERRAFORM_CONDITION='false'
        ENVIRONMENT='prod' // or prod
        APP='vote-app'
    }
    stages{
        stage("Clean WorkSpace"){
            steps{
                cleanWs()
            }
        }

        stage("Checkout Git"){
            steps{
                git branch: 'main', url: 'https://github.com/Universe1609/voting-app-devops'
            }
        }

        stage("AnÃ¡lisis Sonarqube") {
            steps {
                dir('Application-code/vote'){
                    withSonarQubeEnv('sonar-server') {
                        sh '''$SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=${APP} \
                        -Dsonar.projectKey=${APP}'''
                    }
                }
            }
        }

        stage("Quality Check") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar'
                }
            }
        }

        stage("Escaneo de Dependencias OWASP") {
            steps {
                dir('Application-code/vote'){
                    dependencyCheck additionalArguments: ''' -o './'
                                                        -s './'
                                                        -f 'ALL'
                                                        --prettyPrint''', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                }
            }
        }

        stage("Filesystem scanning con Trivy") {
            steps {
                dir('Application-code/vote'){
                    sh 'trivy fs --scanners vuln,secret,misconfig -f table . > trivyfs-scanning-${APP}-${BUILD_NUMBER}-${BUILD_ID}.txt'
                }
            }
        }

        stage("Compilacion de la Imagen docker") {
            steps {
                dir('Application-code/vote'){
                    script {
                        sh 'docker system prune -f'
                        sh 'docker build -t ${DOCKERFILE_NAME}:${BUILD_NUMBER} .'
                    }
                }
            }
        }

        stage("Docker image scanning con Trivy") {
            steps {
                dir('Application-code/vote'){
                    sh 'trivy image -f table ${DOCKERFILE_NAME}:${BUILD_NUMBER} > trivyimage-scanning-${APP}-${BUILD_NUMBER}-${BUILD_ID}.txt'
                }
            }
        }

//        stage("Terraform Plan"){
//            when {
//                expression {env.TERRAFORM_CONDITION == 'true'}
//            }
//            steps {
//                dir('./Terraform') {
//                    //sh 'terraform init' backend s3 initialized
//                    sh 'terraform plan'
//                }
//            }
//        }
//
//        stage("Terraform Apply"){
//            when {
//                expression {env.TERRAFORM_CONDITION == 'true'}
//            }
//            steps{
//                dir('./Terraform') {
//                    sh 'terraform apply -auto-approve'
//                }
//            }
//        }
    }
    post{
        always{
            script {
                emailext attachLog: true,
                    subject: "'${currentBuild.result}'",
                    body: "Project: ${env.JOB_NAME}" + "Build Number: ${BUILD_NUMBER}" + "URL: ${BUILD_URL} ",
                    to: "cloudgroupuni@gmail.com",
                    attachmentsPattern: 'Application-code/vote/trivyimage-scanning-*.txt, Application-code/vote/trivyfs-scanning-*.txt, Application-code/vote/dependency-check-report.xml'
            }
        }
    }
}